#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <errno.h>
#include <limits.h>
#include <asm/ioctls.h>
#include <time.h>
#include <pthread.h>
#include "ennOS.h"
#include "ennAPI.h"
#include "ModBus_TCP.h"

//static int g_ModBusTaskID = 0;


void Test_Func()
{
	ENN_U8 tmp[8];
	int i = 0;
	ENN_U32 len;
	ENN_U16 u16CRC;
	FILE *fp;
	static int count = 0;

#if 1	
	fp = fopen("/home/1.txt", "rw");
	if(fp == NULL)
	{
		perror("Fail to open");
		exit(1);
	}
	printf("\n%s, %d, fd = %d\n",__FUNCTION__,__LINE__,fp);


	while(1)
	{
		printf("\ncount = %d\n",count);
		count++;
		printf("\n%s, %d\n",__FUNCTION__,__LINE__);
		memset(tmp, 0, 8);
		tmp[0] = 0x05;
		tmp[1] = 0x03;
		tmp[2] = 0x00;
		tmp[3] = 0x00;
		tmp[4] = 0x00;
		tmp[5] = 0x04;
		u16CRC = CRC16(tmp, 6);
		printf("u16CRC = 0x%x\n",u16CRC);
		tmp[7] = (ENN_U8)(u16CRC >> 8);
		tmp[6] = (ENN_U8)(u16CRC & 0x00FF);
		for(i = 0; i < 8; i++) 
		{
			//tmp[i] = i%0xFF;
			printf("%2.2x, ",tmp[i]);
		}
		printf("\n");
		UART_Write(CHANNEL1, tmp, 8);
		printf("\n%s, %d\n",__FUNCTION__,__LINE__);
		memset(tmp, 0, 8);
	#if 1
		len = UART_Read(CHANNEL4, tmp, 13);
		printf("\n%s, %d\n",__FUNCTION__,__LINE__);
		for(i = 0; i < len; i++)
			printf(" %2.2x", tmp[i]);
		printf("\n");
		fwrite(tmp, len, 1, fp);
	#endif
		ENNOS_DelayTask(100);
	}
#else
	while(1)
	{
		printf("%s, %d\n",__FUNCTION__,__LINE__);
		ENNOS_DelayTask(100);
	}
#endif
}

ENN_ErrorCode_t InitTest_Task()
{
	ENNOS_TASK_t taskID;
	ENN_ErrorCode_t returnCode = ENN_SUCCESS;

	returnCode = ENNOS_CreateTask("TEST", ENNOS_TASK_PRIORITY_MIDDLE, 4*1024,&taskID, ENNOS_TASK_START, (void*)Test_Rx, NULL);
	if(ENN_SUCCESS != returnCode)
	{
		printf("\nCreate TCP TEST task fail!\n");
		return returnCode;
	}

	return ENN_SUCCESS;
}

void File_Test()
{
	FILE *fpConfig = NULL;
	
	fpConfig = fopen("/home/345.txt", "w+");
	perror("open configure file: ");
	if(NULL == fpConfig)
	{
		return ENN_FAIL;
	}

	fputs("寄存器地址\t长度\tREG_ADDR/SLAVE_ID/CHANNEL\t寄存器名字\t\t寄存器描述\r\n", fpConfig);
	perror("puts configure file: ");
	//printf("%s, %d, u16Ret = %d\n",__FUNCTION__,__LINE__, u16Ret);
	if(0 != fclose(fpConfig))
	{
		perror("save configure file fail ");
		printf("%s, %d\n",__FUNCTION__,__LINE__);
		return ;
	}
	perror("save configure file: ");
	return ;
}

#if 0
int main()
{
	char *name = "单建超测试";
	unsigned char slave_name[20];
	
	printf("Content-type:text/html\n\n");

	printf("{\"namelen\":\"%d\",", strlen(name));
	printf("\"name\":\"%s\",", name);

	memset(slave_name, 0, 20);
	GB2312_To_UTF8(name, strlen(name), slave_name, 20);
	printf("\"slave_name\":\"%s\"}", slave_name);
	return 0;
}
#endif
#if 1

int TL16c754B_UART_Select(int s32Handle, int timeout)
{
	struct timeval timout;
	fd_set rset;
	int    ret = 0;

	if(timeout <= 0)
	{
		return -1;
	}

	FD_ZERO(&rset);
	FD_SET (s32Handle, &rset);
	
	timout.tv_sec  =  timeout / 1000;
	timout.tv_usec = (timeout % 1000) * 1000;

	ret = select(s32Handle + 1, &rset, NULL, NULL, &timout);
	printf("\n%s, %d, ret = %d\n",__FUNCTION__, __LINE__, ret);
	if(ret > 0)
	{
		return 0; /* timeout */
	}
	printf("\n%s, %d, ret = %d\n",__FUNCTION__, __LINE__, ret);
	
	return -1;
}

char TL16c754B_UART_ReadChar(int s32Handle)
{
	ENN_S32  ret;
	ENN_U8 buf[2];

	ret = read(s32Handle, buf, 1);

	if(ret == 1) return buf[0];
	if(ret == 0) return -2;
	return -1;
}


int TL16c754B_UART_ReadBlock(int s32Handle, ENN_U8 *buf, ENN_U32 len, ENN_U32 timeout)
{
	ENN_U32 c, retlen;
	ENN_U32 i = 0;

	retlen = 0;
	for(i=0; i<len; i++)
	{
		if(timeout >= 0)
		{
			if(TL16c754B_UART_Select(s32Handle, timeout) < 0) 
			{
				break; // timeout
			}
		}
		c = TL16c754B_UART_ReadChar(s32Handle);
		printf("%s, %d, c = 0x%X\n",__FUNCTION__,__LINE__,c);
		if(c < 0) return c;
		buf[i] = (ENN_U8) c;
		retlen = i+1;
	}
	if(retlen <= 0) return -1;
	return retlen;
}

void TL16c754B_UART_TEST(void)
{
	ENN_S32 s32Handle = 0;
	ENN_S32 ret = 0;
	//ENN_U8 tel[8] = {0x02,0x03,0x00,0x02,0x00,0x05,0x24,0x3A};
	ENN_U8 tel[8] = {0x05,0x03,0x00,0x00,0x00,0x0E,0xC5,0x8A};
	ENN_U8 test[3] = {0x55, 0x66, 0x77};
	int i = 0;
	ENN_U8 tel1[20] = {0};
	ENN_U8 aReadData[512];
	int len = 0;
	int s32Len = 0;
	ENN_U8 slave = 0;
	ENN_U8 function = 0;
	ENN_U8 byte_count = 0;
	//char *name = "/dev/ttymxc1";
	char *name = "/dev/ttyS1";
	
	//DEBUG_UART("%s, %d, %s\n\n",__FUNCTION__,__LINE__, name);
	//s32Handle = UART_Open(name, BAUDRATE_4800, 8, 1, 1);
	s32Handle = UART_Open(name, BAUDRATE_9600, 8, 1, PARITY_NONE);
	if(s32Handle < 0)
	{
		DEBUG_UART("%s, %d, %d\n",__FUNCTION__,__LINE__,s32Handle);
		return ;
	}
	DEBUG_UART("%s, %d, %d\n",__FUNCTION__,__LINE__,s32Handle);
	
	for(i=0; i<8; i++)
	{
		DEBUG_UART("%X ", tel[i]);
	}
	ret = write(s32Handle, tel, 8);
	//ret = write(s32Handle, test, 2);
	DEBUG_UART("\n%s, %d, ret = %d\n",__FUNCTION__, __LINE__, ret);
	//return ;

	ENNModBus_Sleep((4*1000)/48);

	ret = TL16c754B_UART_Select(s32Handle, 1000);
	DEBUG_UART("\n%s, %d, ret = %d\n",__FUNCTION__, __LINE__, ret);
	if(ret < 0)
	{
		DEBUG_UART("%s, %d, %d\n",__FUNCTION__,__LINE__,s32Handle);
        perror("select error");
		close(s32Handle);
		return ;
	}
	
	if(TL16c754B_UART_ReadBlock(s32Handle, aReadData, 2, 1000) <= 0)
	{
		DEBUG_UART("%s, %d, %d\n",__FUNCTION__,__LINE__,s32Handle);
        perror("select error");
		close(s32Handle);
		return ;
	}

	slave     = aReadData[len++];
	function  = aReadData[len++];
	DEBUG_UART("%s, %d, slave = 0x%X\n",__FUNCTION__,__LINE__,slave);
	DEBUG_UART("%s, %d, function = 0x%X\n",__FUNCTION__,__LINE__,function);
	
	ret = TL16c754B_UART_Select(s32Handle, 1000);
	if(ret < 0)
	{
		DEBUG_UART("%s, %d, ret = %d\n",__FUNCTION__,__LINE__,ret);
		close(s32Handle);
		return ;
	}
	if(TL16c754B_UART_ReadBlock(s32Handle, &aReadData[len], 1, 1000) <= 0)
	{
		close(s32Handle);
		return 0;
	}
	byte_count = aReadData[len++];
	DEBUG_UART("%s, %d, byte_count = 0x%X\n",__FUNCTION__,__LINE__,byte_count);

	ret = TL16c754B_UART_Select(s32Handle, 1000);
	if(ret < 0)
	{
		DEBUG_UART("%s, %d, ret = %d\n",__FUNCTION__,__LINE__,ret);
		close(s32Handle);
		return ;
	}

	s32Len = TL16c754B_UART_ReadBlock(s32Handle, &aReadData[len], byte_count+2, 2000);
	DEBUG_UART("%s, %d, s32Len = %d\n",__FUNCTION__,__LINE__,s32Len);
	if((s32Len <= 0) && (s32Len != (byte_count+2)))
	{
		DEBUG_UART("%s, %d, s32Len = %d\n",__FUNCTION__,__LINE__,s32Len);
		close(s32Handle);
		return ;
	}
	len += byte_count + 2;
	DEBUG_UART("len = %d\n", len);
	for(i=0; i<len; i++)
	{
		printf("0x%2.2X ",aReadData[i]);
	}
	DEBUG_UART("\nlen = %d\n", len);
	
	close(s32Handle);
	return ;
}

#define I2C_SLAVE	0x0703
#define I2C_TENBIT	0x0704

#define I2C_ADDR 	0xC0

int CAT9552_LED_TEST(void)
{
	int GiFd = 0;
	int uiRet = 0;
	unsigned char addr[3];
	unsigned char tx_buf[5];
	unsigned char rx_buf[5];
	
	addr[0] = 0;
	
#if 1
	int fd;
	fd = open("/dev/mx25_gpio", 0);
	if (fd < 0) 
	{
		perror("open /dev/mx25_gpio");
		return -1;
	}

	uiRet = ioctl(fd, 11, 1);
	printf("%s, %d, uiRet = %d\n",__FUNCTION__,__LINE__, uiRet);
	ENNOS_DelayTask(100);
	
	uiRet = ioctl(fd, 11, 0);
	printf("%s, %d, uiRet = %d\n",__FUNCTION__,__LINE__, uiRet);
	ENNOS_DelayTask(100);

	uiRet = ioctl(fd, 11, 1);
	printf("%s, %d, uiRet = %d\n",__FUNCTION__,__LINE__, uiRet);
	ENNOS_DelayTask(100);

	//return 0;
#endif

	GiFd = open("/dev/i2c-1", O_RDWR);	 
	if(GiFd < 0)
	{
		perror("open i2c error\n");
		return -1;
	}
	
  	uiRet = ioctl(GiFd, I2C_SLAVE, I2C_ADDR >> 1);  //设置从机地址
	if (uiRet < 0) 
	{
		printf("setenv address faile ret: %x \n", uiRet);
		return -1;
 	}
	
	uiRet = ioctl(GiFd, I2C_TENBIT, 0);
	if (uiRet < 0) 
	{
		printf("setenv length ret: %x \n", uiRet);
		return -1;
 	}
	
	/*addr[0] = 0x17;
	uiRet = write(GiFd, addr, 1);
	printf("%s, %d, uiRet = %d\n",__FUNCTION__,__LINE__, uiRet);
	printf("%s, %d, addr[0] = 0x%X\n",__FUNCTION__,__LINE__, addr[0]);
	rx_buf[0] = 0x66;
	uiRet = read(GiFd, rx_buf, 1);
	printf("%s, %d, uiRet = %d\n",__FUNCTION__,__LINE__, uiRet);

	printf("%s, %d, rx_buf[0] = 0x%X\n",__FUNCTION__,__LINE__, rx_buf[0]);
	close(GiFd);
	return 0;*/
	
	addr[0] = 0x12;
	addr[1] = 0x2B;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x13;
	addr[1] = 0x80;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);
	
	addr[0] = 0x14;
	addr[1] = 0x0A;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x15;
	addr[1] = 0xC0;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x16;
	addr[1] = 0x40;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x17;
	addr[1] = 0xAA;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x18;
	addr[1] = 0xAA;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	addr[0] = 0x19;
	addr[1] = 0xAA;
	uiRet = write(GiFd, addr, 2);
	printf("%s, %d, uiRet = %d    \n",__FUNCTION__,__LINE__, uiRet);

	return 0;
}

int main()
{
	//static unsigned int i = 100;
	ENN_ErrorCode_t returnCode;
	/*char *name = "设备1";
	char name1[20] = {0};
	int i = 0;

	printf("%s, %d\n",__FUNCTION__,__LINE__);

	printf("%s, %d, 名字 = %s, %d\n",__FUNCTION__,__LINE__, name, strlen(name));
	for(i=0; i< strlen(name); i++)
	{
		printf("0x%X\n",name[i]);
	}
	GB2312_To_UTF8(name, strlen(name), name1, 20);
	printf("%s, %d, 名字1 = %s, %d\n",__FUNCTION__,__LINE__, name1, strlen(name1));
	for(i=0; i< strlen(name1); i++)
	{
		printf("0x%X\n",name1[i]);
	}*/
	//File_Test();
#if 0
	int fd;
	fd = open("/dev/mx25_gpio", 0);
	if (fd < 0) 
	{
		perror("open /dev/mx25_gpio");
		return -1;
	}

	ioctl(fd, 10, 0);
	ENNOS_DelayTask(100);
	
	ioctl(fd, 10, 1);
	ENNOS_DelayTask(100);

	ioctl(fd, 10, 0);
	ENNOS_DelayTask(100);

	return 0;
#endif

	returnCode = ENNOS_Init();
	/*ENNLED_Init();
	ENNLED_On(CHANNEL1, 0);
	ENNLED_On(CHANNEL2, 1);
	ENNLED_On(CHANNEL3, 0);
	ENNLED_On(CHANNEL4, 1);
	ENNLED_On(CHANNEL5, 1);
	ENNLED_On(CHANNEL6, 0);
	ENNLED_On(CHANNEL7, 1);
	ENNLED_On(CHANNEL8, 0);*/

	ENNSock_EthernetIPAddressSet("10.20.1.251");
	ENNSock_EthernetSubNetmaskSet("255.255.255.0");
	ENNSock_EthernetGatewaySet("10.20.1.1");
	//system("insmod /home/extuart.ko");
	//TL16c754B_UART_TEST();
	//CAT9552_LED_TEST();
	//return 0;
#if 1
	returnCode = ENNModBus_History_Init();
	
	//printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
	//returnCode = InitTest_Task();

	returnCode = ENNModBus_Read_Configure();
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}

	returnCode = ENNModBus_Salve_Init();
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}
	
	returnCode = ENNModBus_Build_File();
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}

	//returnCode = UART_Init(CHANNEL1, 4800, 8, 1, PARITY_ODD);
	returnCode = ENNModBus_Create_Channel_Task();
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}
	
	returnCode = InitENNModBus_Task();
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}
#endif

	returnCode = ENNModBus_Create_PIPE_Task();
	printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
	if(ENN_SUCCESS != returnCode)
	{
		printf("%s, %d, %d\n",__FUNCTION__,__LINE__,returnCode);
		return -1;
	}

	while(1)
	{
		ENNTRACE("%s, %d\n",__FUNCTION__,__LINE__);
		ENNOS_DelayTask(10000);
	}
#if 0
	for(i = 0; i < 256; i++) 
	{
		tmp[i] = i%0xFF;
		printf("%2.2x, ",i);
	}
	printf("\n");
	UART_Write(UART1, tmp, 256);
	while(1)
	{
		printf("\n%s, %d\n",__FUNCTION__,__LINE__);
		len = UART_Read(UART1, tmp, 256);
		for(i = 0; i < len; i++)
			printf(" %2.2x", tmp[i]);
		printf("\n");
		//ENNOS_DelayTask(100);
	}
#endif

	return 0;
}
#endif

#if 0
static pthread_t gTaskId;

int main()
{
	ENNOS_TASK_t taskID;
	static unsigned int i = 100;
    ENN_ErrorCode_t returnCode;
	//hardware init

	//InitENNModBus_Task();
	printf("%s, %d\n",__FUNCTION__,__LINE__);
	//ENNModBus_TCP_Server();
#if 0
	if(0 != pthread_create(&gTaskId, NULL, ENNModBus_TCP_Server, NULL))
	{
		printf("serial: create TCP task fail\n");
	}
	//pthread_join(gTaskId, NULL);
#else
	ENNOS_Init();
    //returnCode = ENNOS_CreateTask("TCP_SERVER", ENNOS_TASK_PRIORITY_MIDDLE, 4*1024,&taskID, ENNOS_TASK_START, (void*)ENNModBus_TCP_Server, NULL);
    printf("%s, %d\n",__FUNCTION__,__LINE__);
	returnCode = ENNOS_CreateTask("TCP_SERVER", ENNOS_TASK_PRIORITY_MIDDLE, 4*1024,&taskID, ENNOS_TASK_START, (void*)ENNModBus_TCP_Server, NULL);
	if(ENN_SUCCESS != returnCode)
	{
		printf("serial: create scan task fail\n");
		return -1;
	}
	//pthread_join(taskID, NULL);
#endif
	printf("%s, %d\n",__FUNCTION__,__LINE__);
#if 0
	while(1)
	{
		//ENNOS_DelayTask(10000);
		printf("shanjianchao    %d\n",i);
		printf("%s, %d\n",__FUNCTION__,__LINE__);
		func();
		usleep(70000);
		printf("%s, %d\n",__FUNCTION__,__LINE__);
	}	
#endif
	while(1)
	{
		ENNOS_DelayTask(100);
	}

	return 0;
}
#endif
  
